<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Build a WireGuard VPN server on Linode.</title>
    <url>/2019/07/23/Build-a-WireGuard-VPN-server-on-Linode/</url>
    <content><![CDATA[<h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:wireguard/wireguard</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install wireguard</span><br></pre></td></tr></table></figure>
<h3 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h3><ol>
<li>確認 kernel 版本非客制<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uname --kernel-release</span><br><span class="line">// check your kernel name without linode</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>如果執行完上面指令看到有其他非正規字眼像是 xxxxxx-linde152 之類的，你必須去 linode boot settings 的後台設定裡面去把改成 GRUB 2，不然會造成 wireguard 無法確認 kernel 版本會安裝執行失敗<br><a href="https://github.com/StreisandEffect/streisand/issues/500#issuecomment-290158361" target="_blank" rel="noopener">參考這邊</a></p>
<p>改完重開之後會像再執行一次會變成像這樣 4.15.0-54-generic</p>
<ol start="2">
<li>按照正常安裝流程</li>
<li>Key Generation</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wg genkey | tee privatekey | wg pubkey &gt; publickey</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>新建 server 端設定檔<br>在這個位置建立一個檔案 /etc/wireguard/wg0.conf</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Interface]</span><br><span class="line">Address = 10.66.66.1/24  // 通道連上之後的內網 ipv4 ip</span><br><span class="line">Address = fd42:42:42::1/64  // 通道連上之後的內網 ipv6 ip</span><br><span class="line">SaveConfig = <span class="literal">true</span></span><br><span class="line">PostUp = iptables -A FORWARD -i wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE; ip6tables -A FORWARD -i wg0 -j ACCEPT; ip6tables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</span><br><span class="line">PostDown = iptables -D FORWARD -i wg0 -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE; ip6tables -D FORWARD -i wg0 -j ACCEPT; ip6tables -t nat -D POSTROUTING -o eth0 -j MASQUERADE</span><br><span class="line">ListenPort = 51820  // vpn listen port</span><br><span class="line">PrivateKey = &lt;server private key&gt;  // 填上前一個步驟產生的 private key</span><br><span class="line"></span><br><span class="line">[Peer] // 設定可以連入的 client 資訊</span><br><span class="line">PublicKey = &lt;client public key&gt;</span><br><span class="line">AllowedIPs = 10.66.66.2/32, fd42:42:42::2/128  // client 會取到的 ip</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>client 端設定檔</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Interface]</span><br><span class="line">PrivateKey = &lt;client private key&gt;</span><br><span class="line">Address = 10.66.66.2/24, fd42:42:42::2/64</span><br><span class="line">DNS = 8.8.8.8, 1.1.1.1</span><br><span class="line"></span><br><span class="line">[Peer]</span><br><span class="line">PublicKey = &lt;server public key&gt;</span><br><span class="line">AllowedIPs = 0.0.0.0/0, ::/0</span><br><span class="line">Endpoint = &lt;server ip&gt;:&lt;listenPort&gt; // xxx.xxx.xxx.xxx:51820</span><br><span class="line">PersistentKeepalive = 25</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>Set Up Firewall Rules</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw allow 22/tcp</span><br><span class="line">sudo ufw allow 51820/udp</span><br><span class="line">sudo ufw <span class="built_in">enable</span></span><br><span class="line"></span><br><span class="line">sudo ufw status verbose // <span class="keyword">for</span> <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<ol start="7">
<li>Start the Wireguard Service</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wg-quick up wg0</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> wg-quick@wg0 //設定開機自動執行</span><br><span class="line">sudo wg show</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>wireguard</tag>
        <tag>vpn</tag>
        <tag>linode</tag>
        <tag>ubuntu</tag>
        <tag>server</tag>
        <tag>client</tag>
      </tags>
  </entry>
  <entry>
    <title>Cannot boot after restored backup images in Linode</title>
    <url>/2020/07/19/Cannot-boot-after-restored-backup-images-in-Linode/</url>
    <content><![CDATA[<h3 id="緣由"><a href="#緣由" class="headerlink" title="緣由"></a>緣由</h3><p>前幾天 Linode 的 vps 忽然無法寫入硬碟，重開機之後直接找不到硬碟，出現 segmentation fault 之類的錯誤，於是開始了救援的任務。</p>
<h3 id="嘗試步驟"><a href="#嘗試步驟" class="headerlink" title="嘗試步驟"></a>嘗試步驟</h3><p>一開始想說使用自動備份的 image 進行 restore 之後可能可以恢復正常，所以就先進行 restore，等了一陣後來開機後出現找不到硬碟的狀況，訊息如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ALERT!  UUID=&lt;UUID&gt; does not exist. Dropping to !</span><br></pre></td></tr></table></figure>
<p>看到這訊息多半是因為是 VM 的關係，硬碟的區塊改變了 uuid 也跟著變了，所以 /etc/fstab 裡面記錄的還是原來的 uuid 造成 mount 不上去的關係<br>查了一下之後找到了這篇 <a href="https://www.linode.com/community/questions/18789/i-cant-boot-from-my-restored-backup-seeing-uuid-does-not-exist" target="_blank" rel="noopener">點我</a>，剩下就照抄他的吧</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mount -o <span class="built_in">exec</span>,barrier=0 /dev/sda</span><br><span class="line"><span class="built_in">cd</span> /media/sda</span><br><span class="line">mount -t proc proc proc/</span><br><span class="line">mount -t sysfs sys sys/</span><br><span class="line">mount -o <span class="built_in">bind</span> /dev dev/</span><br><span class="line">mount -t devpts pts dev/pts/</span><br><span class="line">chroot /media/sda /bin/bash</span><br><span class="line">mdadm --detail --scan &gt;&gt; /etc/mdadm.conf</span><br><span class="line">update-initramfs -u</span><br><span class="line">update-grub</span><br></pre></td></tr></table></figure>
<p>其中 mdadm 那行卡到，因為沒安裝過這個套件，所以多加了下面一個指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install mdadm</span><br></pre></td></tr></table></figure>
<p>操作完重開機就沒問題了！</p>
]]></content>
      <tags>
        <tag>linode</tag>
        <tag>ubuntu</tag>
        <tag>backup</tag>
        <tag>rescue</tag>
      </tags>
  </entry>
  <entry>
    <title>Check a string is a number or not by Python</title>
    <url>/2021/08/09/Check-a-string-is-a-number-or-not-by-Python/</url>
    <content><![CDATA[<h3 id="緣由"><a href="#緣由" class="headerlink" title="緣由"></a>緣由</h3><p>就是需要判斷某字串是否是數字，一開始用了 isnumeric() 發現中招了，因為國字 “五” 也被判斷成數字，想要來解決一下這問題</p>
<h3 id="過程"><a href="#過程" class="headerlink" title="過程"></a>過程</h3><p>一查之下才發現 python 這個內建也太強大，以下是網路查詢到的解釋：<br>isnumeric() 方法檢測字符串是否只由數字組成，數字可以是： Unicode 數字，全角數字（雙字節），羅馬數字，漢字數字。<br>指數類似 ² 與分數類似 ½ 也屬於數字。</p>
<h3 id="解決"><a href="#解決" class="headerlink" title="解決"></a>解決</h3><p>實際上應該使用 string.isdigit() 可以用來檢查所有字元是否都是數字的情況<br>string 底下還有其他的 function 可以利用也順便列一下<br>string.isalnum() 所有字元都是數字或者字母<br>string.isalpha() 所有字元都是字母<br>string.isspace() 所有字元都是空白字元、t、n、r</p>
<p>string.islower() 所有字元都是小寫<br>string.isupper() 所有字元都是大寫<br>string.istitle() 所有單詞都是首字母大寫，像標題<br>string.isspace() 所有字元都是空白字符、\t、\n、\r</p>
<p>另外 isdecimal() 是用來判斷是否是十進位的數字</p>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>text</tag>
      </tags>
  </entry>
  <entry>
    <title>About my experience</title>
    <url>/2021/02/15/About-my-experience/</url>
    <content><![CDATA[<h3 id="緣起"><a href="#緣起" class="headerlink" title="緣起"></a>緣起</h3><p>最近一年零零星星斷斷續續的有在看些工作的機會，想說趁著這個機會稍微檢視一下經歷和自我介紹的部分。</p>
<h3 id="研究所"><a href="#研究所" class="headerlink" title="研究所"></a>研究所</h3><p>研究所時期因為一些陰錯陽差，本來想念的學校沒拿到，又放棄了一些國立大學，最後因為地利的關係去了某私立前段，入了當時出初茅廬的一位現國內 AI 領域大咖老師門下；除了初期草創了實驗室，掌管實驗室所有大小事，同時倚靠著中研院的資源主要做過生物醫學類蛋白質交互作用、自然語言處理、跨語檢索等不同領域。</p>
<p>在碩二下學期一般菸酒生準備衝刺畢業的前夕，我拿到了一個代表學校去韓國交流一個月的機會（但是是在暑假），我毅然決然就決定回來再來忙畢業的事情（就算到現在回想起來，我也沒後悔過，而韓國相關的事情又是另一段故事惹）。</p>
<p>回國後因為有要事要在 12月前往美國，於是在滿短的時間內一陣能量爆發就完成研究也結束口試了。</p>
<h3 id="畢業後的路"><a href="#畢業後的路" class="headerlink" title="畢業後的路"></a>畢業後的路</h3><p>回台灣差不多是一月底的事情，處理完學校的事情之後開始投入找研發替代役的準備，因為時間已經有點晚了，很多比較早開始的公司都結束了；但前前後後還是面了十多間，大約拿到了一半的 offer，屬意其中一間筆電代工大廠，當時他們想做智慧電視吧。</p>
<p>然後當時真的太天真，在講好口頭協議之後，我就推掉了其他全部，直到某天接到一通電話，是打來道歉的，說他們拿不到名額，所以很抱歉同學你要被婊囉…，頓時我陷入一個進退兩難也沒有其他機會可以面試，也沒有其他地方可以去，一個很想死差點要被逼去當兵的狀態。</p>
<p>又直到註冊前一週，信箱來了一封信，某間公司某主管問我找到了沒，他們的人落跑了（關於這個機會其實有個插曲可以說，是研究所其他系的某同學有天傳訊息給我，說有個公司在找人，那主管認識我老闆叫我去投看看，我寫信去問，但是他們說已經收滿了），於似乎我就在很快速的流程之下，三天內決定了之後三年落腳的地方。</p>
<h3 id="研發替代役"><a href="#研發替代役" class="headerlink" title="研發替代役"></a>研發替代役</h3><p>關於這個單位呢，我只能說是屬於一個法人公司，網路資料裡面都會說是個涼爽的地方，但我待的部門算是公司的戰鬥單位，號稱整個公司大約兩千人裡面少數真的可以打的單位，但會選擇這邊一方面是領域和學校是有延伸，二方面是我們部門和我們中研院的體系有產學合作，不單只是沒得選擇了而已。</p>
<p>由於四月到新訓入伍還有一段時間，我就提前進公司想說可以提早適應，這段時間我平均一週去個兩到三天，想說可以先打打雜練練功，殊不知這是一個小崩潰的開始。</p>
<p>一進去被要求寫 java，同時開始獨立開發一個新的專案，但在此時 java 我一行也沒寫過？喔可能在學校寫過一點 jsp 但那真的很淺，但死拼活拼也差不多在一兩個月內完成了一套雛形，沒想到業務、小主管就開始帶著我出去找客戶兜售這個產品了，我也是差不多醉了…</p>
<p>但這樣兜售兜售也是前前後後合作了不少間廠商，所以很多面試官都會問說你有獨立從無到有開發過一個產品的經驗嗎？我說打從頭開始就是，常常直接被給一個不屑的眼神…</p>
<p>這專案持續了大概三年左右，技轉金額累計大約有 1200w+，也讓我幾乎以一個核心專案就待到可以退伍了</p>
<h3 id="後替代役時期"><a href="#後替代役時期" class="headerlink" title="後替代役時期"></a>後替代役時期</h3><p>結束了這三年雖然沒有達成當初設定的目標，但是卻也達成了許多當初沒想過的成就，有很大一部分的替代役會考慮在這個時機點跳槽，而我當時因為業務穩定且也是單位主力栽培的對象就也暫時打算邊走邊看，但我主要負責的案子也因為公司政策不打算繼續發展（法人單位的悲哀）而慢慢走向後期，部門大約在這個時期到達如日中天的巔峰時期大約維持了兩年左右；在這個時期部門的政策將核心的研發方向從數位學習轉向了 AI，也因此在此時期做了很多不同類型的專案，但因為在這塊並沒有長期的將基礎打好，業務那邊也沒有兜售成功，大多數都只做了幾個月就被丟棄。</p>
<p>在這段期間其實也有面了幾間公司和被人拉去做些創業專案題目，因為想去外商和創業一直是我想做的事，但最後都因為各種原因而不了了之，值得一提的大概是某跨國企業很想找我去當系統分析師，但考量到還不想太早完全脫離寫 code 生涯同時公司太遠上班時間又太早這件事，就沒有接受。</p>
<p>這段時間大概持續兩年多大概是我在該單位最迷惘的時候，我覺得我的進步停滯了，這邊好像沒什麼可以學了，同時因為政策等等因素一直導致都在用錯誤的方法做錯的事，顯得自己很智障的感覺，我不知道是不是所有公司都這樣，但至少在這邊或甚至說我合作過的外頭的工程師，大多都會用很多不正規的方法來做事，導致要跟其他人和做的時候事情會事倍功半，這個現象在往後出去面試的時候曾經被不少工程師取笑「什麼叫做正確的方法做事，有人不是這樣做事嗎？」，但就我的經驗來說亂搞的人就是居多。</p>
<h3 id="救火隊時期"><a href="#救火隊時期" class="headerlink" title="救火隊時期"></a>救火隊時期</h3><p>在這個時期差不多在公司了待了五六年了，credit 也累積到了一定，但當然就更想轉職了，但在這個時間點隨著組織結構變動，我算是有了自己建軍的機會，lead 一個大約 3~5人的小團隊，於是我終於可以有一定的權限決定處理問題的方式（不管需求是合理的還是蠢的，至少希望是用合理的方法）。</p>
<p>但我們這團隊在短時間內變成了所有大團隊裡面最急、最難、最賽、最新、沒人會、最不合理的需求，都是丟過來我們這邊，反正我們這邊都有辦法解決，常常有今天開需求明天要、後天要之類的狀況，於是我們這團隊拿到工作時間極度彈性權利，主管也不會管我們幾點上下班，這點對我們而言還算不錯，公司沒重大的事的話，可以中午在家吃完飯下午再進辦公室或是直接在家上班了（我們應該算是台灣 WFH 先驅之一），但忙起來的時候也是很誇張，一週工作個一百小時，連續幾個禮拜睡公司等等。</p>
<p>由於團隊成員組成正確、做事方法正確、工作方式自由這些因素，我又對這份工作有了動力；但此時是公司開始走下坡的開始，所以預算慢慢開始緊縮，加薪什麼的也開始變少，但最糟糕的是因為這樣公司慢慢變成一攤死水，人員只出不進，這就慢慢種下往後失敗的種子。</p>
<h3 id="後救火隊時期"><a href="#後救火隊時期" class="headerlink" title="後救火隊時期"></a>後救火隊時期</h3><p>大約又過了一兩年，差不多滿七年或八年之後某年，我們的主管被拔擢上去當了大老闆的副手，升上去之後突然一個性情大變，時常丟出很多荒誕怪奇的想法以及行事作風，也常常很大聲的去對外承諾做不到的事情（也許就是所謂「將帥無能，累死三軍」），整個部門的方向又從 AI 相關轉去 FinTech，儘管實際上不是真正的 FinTech 但要建構整個平台也是要花不少心力，為了要結盟更多的廠商我們也花了非常非常非常（真的很多要講三次）多的時間，幫這堆廠商做了很多本來是他們應該要做的事情，而且這個業務量非常大也繁瑣，簡單說事情多又很蠢，但又沒辦法，不時也是要大加班。</p>
<p>但這時期我們老闆不時被人問起我們為什麼這麼常加班，他總笑著跟他們說：「哦，他們習慣晚上工作！」，我其實一直不懂他說這什麼鬼話，也許是怕被人家說他是個害人加班的主管吧？但就是你三天兩頭今天開需求後天就要啊…</p>
<p>反正後來花了幾個月總算也是把那個平台的雛形給弄的差不多了，然後那個案子因為牽扯到某開幕記者會，後來是順利完成，完成後還有慶功宴，慶功宴沒有列到我們團隊，對外也完全沒有提到這系統是誰做的，也完全沒人問，彷彿是在空氣間自己生出來的，在這個時間點我其實覺得這群人有那麼一點點可笑。</p>
<p>然後沒多久又有新的規定頒佈了，開始要嚴格要求上下班時間，交代了一位同仁早上九點半要進行早點名，沒到沒請假的都算曠職，這一個舉動基本上徹底惹毛我們，擺明了就是針對我們團隊來的，從此開始我們團隊所剩的三人，一個開始找工作，另外兩個開始每天早上請假一到兩小時，另外拒絕所有的加班，反正我們一年 30天假，一天請一小時的話可以請個 240天…</p>
<p>而在這個年初，前一年度的考績也出來了，我本人前面六年每年度都是 Top 10%，總算今年掉下去了，其實這也是做得很明顯了，不離不棄被當北七的常見案例，大約在五六月的時候，找了一陣子工作的那位拿到了國內某知名外商的 offer 準備轉職，因為我們三人的工作負擔很重的關係，因此提早了先知會了主管，希望盡快找人來做交接，需要的時間很長。</p>
<p>而到了七月，是我們發前一年 bonus 的時候，這位拿到了一個很微妙的數字就是 0，會用微妙來形容是因為幾個原因，首先這是前一年的業績獎金，那當然以前一年的貢獻來評估，如果主管因為私心給的少，或許也可以以貢獻度低來做合理解釋，給了一個 0就如同挖了一個坑給自己；於是過了幾天這位就直接去找主管本人丟了個直球「請問我去年的貢獻如何，為什麼我是 0？」這主管也妙了，情急之下給了個天才般的答案「哦，因為我們七月的獎金是預先發的，其實是當年度 7~12月的獎金，跟 1月的農曆年獎金一樣，那是 1~6月的獎金，那你八月之後就不在了，當然就是 0！」</p>
<p>因為這全程有錄音，因此這主管也就幫他老闆捅出個大簍子，事後直接去找人資單位來解釋「預發獎金」這個行為，後來人資單位直接下來介入，最後大老闆出來處理這件事，後來當然也是補了些錢息事寧人；但這事件也是徹底加深了剩下兩位要離開的決心。</p>
<p>我們剩下的兩位是部門上系統的核心，從各項服務、軟硬體架構、對內對外各項系統幾乎都掌握在我們手上，要完全交接的話我們估計大約要五位 JR. 或是 三位 SR.，於是我們大約間隔一週先後提了離職，小主管希望我們撐久點給他點時間找人，這點忙本來也就在我們計算之中所以他待了兩個月、我待了三個月才離開。（儘管給了這麼長時間，最終還是沒有找到新人，所以只有把一些短期看起來比較重要的、還有用到的進行簡單交接，以及留下些文件好讓他們能有點眉目）</p>
<p>以為開了大絕可以一路爽到離職日嗎？事情當然沒有這麼順利，FinTech 的案子還有些功能和服務要和外部廠商對接，然後又沒人搞得動，所以又呼叫 119…，搞到最後我離職前最後個週末的六日都還在加班整天搞到一肚子不爽，所以一直到離職日也幾乎沒閒過一天。（到此結束這邊約莫八年半的經歷）</p>
<h3 id="休息期"><a href="#休息期" class="headerlink" title="休息期"></a>休息期</h3><p>被操了好陣子的我們也是想先休息一陣再看看下一步，但雖說是休息其實也不是真的沒事幹，除了專心去照顧投資的事業之外，另一邊去玩了點音樂，其實每天也是頗忙碌的，不時因為一些活動要跟媒體記者交涉、跟網紅網美打交道，到處經營一些人際關係，還要照顧員工的心理以及工作狀態其實也是要花非常多時間的。</p>
<h3 id="重出江湖"><a href="#重出江湖" class="headerlink" title="重出江湖"></a>重出江湖</h3><p>日子過了大概持續了十個月到了隔年九月，經過朋友的介紹認識了某類似人力仲介手上有個案子，某小有名氣的國內電商想要開發個新功能，去聊了兩次之後覺得可以打個工賺點錢補貼一下，於是我們老同事的核心兩位以及又拉了一位前端一起進去幫忙。</p>
<p>誰知道一進去就是一陣莫名，開發新功能為何要交接這麼多東西，原來他們技術部門全部要離職（唯一留下的一位前端在不久後也被火掉），結果我們就不小心掉入這個屎坑，花了兩週就開始接手這個電商的所有系統。（原有的技術頭還私下叫我們趕快閃超級賽XD）</p>
<p>後來待了一陣子之後才了解到這地方最大的問題是政治問題，但我們一直維持著 Full-time remote 的工作模式倒也互不影響，每週花兩個下午去公司開會其餘時間大約是 24hr on call，以壓力來說其實很大，每天都是超過百萬的營業額，一有什麼閃失就會電話響，而舊有系統裡面有極多沒修好的漏洞，會造成訂單漏單以及送貨延遲等諸多問題，但身為專業救火隊員這點火還是可以撐的下來。</p>
<p>直到某天發現人力仲介那邊和公司資方對於薪水認知有些問題，我們當然不可能白做工就斷然決定離開，前後待了大約五個月左右的地方，也大致摸了一輪電商的營運模式以及所需工作，也算是有點收穫，但薪水的恩怨情仇又是另外一段故事。</p>
<h3 id="等待機會"><a href="#等待機會" class="headerlink" title="等待機會"></a>等待機會</h3><p>離開了電商之後，直接就遇到了歷史級恐怖的 2020，外面的工作開始緊縮，雖然也是有些小新創想要趁著這時間起步，但這年我們主要也以幾個外包案為主，並沒有拿到太多機會，在這年我不時會透過一些獵頭朋友去找些公司聊聊天，前後大概也接觸了七八間公司，就我的感覺現在外面的工作機會說是要找 Sr. 其實都是想要 Super Jr.，想要找開發能力高的黑手，一個人可以當兩三個用，而不是來幫忙解決一些新手菜鳥解決不了的問題，大多數面試自介完就是開始考實作或是刷題，基本上並不在乎你之前有過什麼樣的經歷或是你的經驗，說好聽是只要有實力人人平等，說難聽點大家都不缺高端人才，因為高端位置大多都被卡住了，或是都選擇先升本土栽培的員工；而現在最缺的就是可以快速動手開發的即戰力，整體來說國內的資訊業環境真的不太好，可能只有外商會真正比較尊重 Sr. 的職缺吧。</p>
<h3 id="給後進一點建議"><a href="#給後進一點建議" class="headerlink" title="給後進一點建議"></a>給後進一點建議</h3><p>我喜歡那個理念「不是你不好，是你還沒遇到適合你可以看見你的好的機會」，的確每個人因為背景、成長過程不同都會有不一樣的特質，這世界總會有些機會就是絕佳的適合你，也總有主管完美的被你打中，在世界看的不夠多的時候還沒遇到罷了，還是隨時要保持信心與好奇心，持續學習，多看些機會總會有適合自己的。</p>
<h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>不要委屈自己，我們在做任何選擇的時候都是有得有失的，失去了這邊也會得到其他的，所以不要害怕做決定，每個人都會因為選了不同道路變成不同特質的人，誰也沒辦法取代誰。</p>
]]></content>
  </entry>
  <entry>
    <title>Drone CI/CD with Github and ssh and docker pipeline</title>
    <url>/2020/08/24/Drone-CI-CD-with-Github-and-ssh-and-docker-pipeline/</url>
    <content><![CDATA[<h3 id="緣由"><a href="#緣由" class="headerlink" title="緣由"></a>緣由</h3><p>因為專案太多了，想簡單製作 CI/CD 的機制，至少把 git push 後的 auto deploy 建置起來，個人之前還有些 gitlab-ci 的經驗，於是就看上了最近兩年比較紅的 drone ci，過程中遇到了不少問題，官方文件也不盡詳細，最後順利解決了在這邊記錄分享一下。</p>
<h3 id="過程"><a href="#過程" class="headerlink" title="過程"></a>過程</h3><p>官網上面或是網路上面有一堆教學文件應該大家都看過不少，我直接提供我這邊遇到的狀況，因為我想要在 git push 之後讓平台直接透過 ssh 工具去進行 auto deploy，同時又想要使用一些 docker image 工具，但官網上面是分開去撰寫的，並沒有特別寫說並用的時候怎麼處理。</p>
<p>我在了解過 drone 運作原理之後摸索出解法，其實很簡單，就是同時起 ssh 和 docker 兩種類型的 runner，然後串在同一包就可以了，下面直接分享我最後的 docker-compose.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  drone-server:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">drone/drone:1</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">80</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./:/data</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">DRONE_SERVER_HOST=$&#123;DRONE_SERVER_HOST&#125;</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">DRONE_SERVER_PROTO=$&#123;DRONE_SERVER_PROTO&#125;</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">DRONE_RPC_SECRET=$&#123;DRONE_RPC_SECRET&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># GitHub Config</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">DRONE_GITHUB_SERVER=https://github.com</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">DRONE_GITHUB_CLIENT_ID=$&#123;DRONE_GITHUB_CLIENT_ID&#125;</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">DRONE_GITHUB_CLIENT_SECRET=$&#123;DRONE_GITHUB_CLIENT_SECRET&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">      -</span> <span class="string">DRONE_LOGS_DEBUG=true</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">DRONE_LOGS_PRETTY=true</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">DRONE_LOGS_COLOR=true</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">      -</span> <span class="string">VIRTUAL_HOST=&lt;your_domain&gt;</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">VIRTUAL_PORT=80</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">LETSENCRYPT_HOST=&lt;your_domain&gt;</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">LETSENCRYPT_EMAIL=&lt;your_mail&gt;</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">public</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># runner for docker version</span></span><br><span class="line"><span class="attr">  drone-runner-docker:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">drone/drone-runner-docker:1</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    depends_on:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">drone-server</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">DRONE_RPC_HOST=$&#123;DRONE_RPC_HOST&#125;</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">DRONE_RPC_PROTO=$&#123;DRONE_RPC_PROTO&#125;</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">DRONE_RPC_SECRET=$&#123;DRONE_RPC_SECRET&#125;</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">DRONE_RUNNER_CAPACITY=1</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">public</span></span><br><span class="line"><span class="attr">  drone-runner-ssh:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">drone/drone-runner-ssh:1</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    depends_on:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">drone-server</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">DRONE_RPC_HOST=$&#123;DRONE_RPC_HOST&#125;</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">DRONE_RPC_PROTO=$&#123;DRONE_RPC_PROTO&#125;</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">DRONE_RPC_SECRET=$&#123;DRONE_RPC_SECRET&#125;</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">DRONE_RUNNER_CAPACITY=1</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">public</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line"><span class="attr">  public:</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>ubuntu</tag>
        <tag>drone</tag>
        <tag>ssh</tag>
        <tag>docker</tag>
        <tag>CI/CD</tag>
        <tag>github</tag>
        <tag>pipeline</tag>
      </tags>
  </entry>
  <entry>
    <title>Error after upgrading pip: cannot import name main</title>
    <url>/2018/08/15/Error-after-upgrading-pip-cannot-import-name-main/</url>
    <content><![CDATA[<h3 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h3><p>平常都習慣 mac 上面做事，這幾天在某台新的 ubuntu 上面裝 pgcli 的時候遇到一個問題<br>用 pip 裝完 pgcli 之後跳出一個提示，意思是說你現在這個 pip v8.1.1 已經過時囉，現在最新的是 v18，建議你快點更新喔，後面還送你一串更新用的指令<br>用它送的指令更新下去…直接幫你把你的 pip 送上西天，會噴以下的訊息</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"/usr/bin/pip"</span>, line 9, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    from pip import main</span><br><span class="line">ImportError: cannot import name <span class="string">'main'</span></span><br></pre></td></tr></table></figure>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>查了一輪大致上是因為新版的 pip v18，只支援 python3，python2 只能更新到 v9 的樣子<br>這真的蠢到我醉了，自己跳訊息出來炸掉自己是哪招…</p>
<p>以下一行解決</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo python -m pip uninstall pip &amp;&amp; sudo apt install python3-pip --reinstall</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>python</tag>
        <tag>pip</tag>
        <tag>python3</tag>
        <tag>pip3</tag>
      </tags>
  </entry>
  <entry>
    <title>Fixed gitlab CI via ssh executor error</title>
    <url>/2018/03/20/Fixed-gitlab-CI-via-ssh-executor-error/</url>
    <content><![CDATA[<h3 id="緣起"><a href="#緣起" class="headerlink" title="緣起"></a>緣起</h3><p>用 gitlab ci 也是一段時間，如果只是要進行一些簡單 test or deploy 之類的工作，用這個會比其他外部工具平台簡單一點，但是在版本不斷推進的同時會遇到了底下的問題</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Running with gitlab-runner 10.5.0 (xxxxxxxx)</span><br><span class="line">  on ssh-xxxxxxxx (xxxxxxxxx)</span><br><span class="line">Using SSH executor...</span><br><span class="line">Running on xxxxxxxxxx via xxxxxxxxxx...</span><br><span class="line">ERROR: Job failed: Process exited with: 1. Reason was:  ()</span><br></pre></td></tr></table></figure>
<p>看了很多文章，早期有一部分建議降版本到 gitlab-runner v1.8.6，的確是可以順利運行，但是到了 gitlab v10 之後似乎又炸裂了，於是這次好好想來解決一番。</p>
<h3 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h3><p>直接進入結論<br>用以下這行就可以解決</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chsh username /bin/bash</span><br></pre></td></tr></table></figure>
<p>就是讓這個 gitlab-runner 登入的帳號，預設要改成 bash (zsh 確定不行，其餘沒試過)</p>
<p>到這邊以為事件就這樣結束了，不過節外總會生枝</p>
<h3 id="事件二"><a href="#事件二" class="headerlink" title="事件二"></a>事件二</h3><p>pipeline job 畫面又跑出這個東西</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fatal: unable to access 'https://gitlab-ci-token:xxxxxxxxxxxxxxxxxxxx@git.example.com/group/project.git/': SSL certificate problem: self signed certificate</span><br><span class="line">ERROR: Job failed: exit code 1</span><br></pre></td></tr></table></figure>
<p>SSL certificate failing 似乎是 gitlab-runner 和 gitlab 到了某版之後出現的 bug，大致上建議的做法是先關掉 SSL 的驗證，等版本修復之後再打開了，解決方法是在 config.toml 裡面 runners 裡面加上這行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">environment = ["GIT_SSL_NO_VERIFY=true"]</span><br><span class="line">or</span><br><span class="line">environment = ["GIT_SSL_NO_VERIFY=1"]</span><br></pre></td></tr></table></figure>
<p>All set…</p>
]]></content>
      <tags>
        <tag>gitlab</tag>
        <tag>gitlab-ci</tag>
        <tag>gitlab-runner</tag>
        <tag>gitlab-devops</tag>
      </tags>
  </entry>
  <entry>
    <title>Enable localhost on mac</title>
    <url>/2014/10/03/Enable-localhost-on-mac/</url>
    <content><![CDATA[<h3 id="緣起"><a href="#緣起" class="headerlink" title="緣起"></a>緣起</h3><p>localhost 對於有在做任何網頁開發的朋友一定不陌生，但最近突然發現一個一直以來被我忽略掉的問題，那就是在 mac 上面的時候我竟然只能使用 127.0.0.1 來當網址，而不能使用 localhost，這想當然爾是因為 hostname 沒有設定將 localhost 對應到 127.0.0.1，所以找了一下設定的方法，分享一下。</p>
<h3 id="直接指令下去就不多解釋了"><a href="#直接指令下去就不多解釋了" class="headerlink" title="直接指令下去就不多解釋了"></a>直接指令下去就不多解釋了</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo vim /private/etc/hosts</span><br></pre></td></tr></table></figure>
<p>找到裡面有一行是<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#127.0.0.1 localhost</span></span><br></pre></td></tr></table></figure></p>
<p>把註解拿掉存檔離開就大功告成了</p>
]]></content>
      <tags>
        <tag>mac</tag>
        <tag>web server</tag>
        <tag>hostname</tag>
      </tags>
  </entry>
  <entry>
    <title>How to build nginx on localhost in Mac OSX</title>
    <url>/2016/05/03/How-to-build-nginx-on-localhost-in-Mac-OSX/</url>
    <content><![CDATA[<h3 id="緣起"><a href="#緣起" class="headerlink" title="緣起"></a>緣起</h3><p>談到 web server 大家第一個想到的大概是老大哥 apache，而且 mac osx 裡面其實已經內建了，方便性不用多說。<br>但近年來 nginx 不論是效能上或是體積上基本上都已經取代 apache 的地位，當然就成為大家的新寵，頂多在使用上有一點點的不方便，這篇文章記錄一下在 mac osx 上面安裝 nginx 的步驟。</p>
<h3 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h3><p>首先你要將 homebrew 裝起來，使用 mac 同時又有在做開發的人應該都有裝吧？<br>好吧，沒有的話先去 <a href="http://brew.sh/" target="_blank" rel="noopener">homebrew</a> 網站看看。</p>
<h3 id="安裝與設置"><a href="#安裝與設置" class="headerlink" title="安裝與設置"></a>安裝與設置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew update</span><br><span class="line">$ brew install nginx</span><br></pre></td></tr></table></figure>
<p>裝好的 nginx 會在路徑 /usr/local/etc/nginx/<br>所謂的設定檔也在這 /usr/local/etc/nginx/nginx.conf<br>打開之後大致上跟一般的 nginx 沒什麼兩樣</p>
<p>但是最需要注意的就是在 FastCGI pass 那段<br>這裡先放上我的給大家參考一下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location ~ \.php$ &#123;</span><br><span class="line">    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">    fastcgi_index  index.php;</span><br><span class="line">    fastcgi_param  SCRIPT_FILENAME <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">    <span class="comment">#fastcgi_param SCRIPT_FILENAME /scripts$fastcgi_script_name;</span></span><br><span class="line">    include        /usr/<span class="built_in">local</span>/etc/nginx/fastcgi_params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>註解掉的第四行是原本預設的內容，必須改成第三行才能運作，不然你會跑不起來然後在 log 裡面看到<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fastcgi sent in stderr: "primary script unknown"</span><br></pre></td></tr></table></figure></p>
<p>既然說到 log，順便提一下 log 的位置在 /usr/local/var/log/nginx/ 裡面<br>預設網頁目錄在 /usr/local/nginx/html</p>
<h3 id="運行與-nginx-指令"><a href="#運行與-nginx-指令" class="headerlink" title="運行與 nginx 指令"></a>運行與 nginx 指令</h3><p>最後這邊簡單列一下可能比較會用到的 nginx 相關指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo nginx // 啟動 nginx</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo nginx -s reload // 重新載入設定</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo nginx -s restart // 重新啟動 nginx</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo php-fpm // 啟動 php-fpm</span></span><br></pre></td></tr></table></figure>
<p>Enjoy it!</p>
]]></content>
      <tags>
        <tag>mac</tag>
        <tag>nginx</tag>
        <tag>OSX</tag>
      </tags>
  </entry>
  <entry>
    <title>Fix hexo with Error: Module version mismatch.</title>
    <url>/2016/05/03/Fix-hexo-with-Error-Module-version-mismatch/</url>
    <content><![CDATA[<h3 id="緣起"><a href="#緣起" class="headerlink" title="緣起"></a>緣起</h3><p>更新了 hexo 之後一執行就噴下面這三行訊息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Error: Module version mismatch. Expected 46, got 14.]</span><br><span class="line">&#123; [Error: Cannot find module './build/default/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' &#125;</span><br><span class="line">&#123; [Error: Cannot find module './build/Debug/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' &#125;</span><br></pre></td></tr></table></figure>
<h3 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h3><p>用以下這兩行就可以解決<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo --no-optional</span><br><span class="line">$ npm install --unsafe-perm --verbose -g hexo</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>How to do multi-row insert with postgres by nodejs</title>
    <url>/2018/08/14/How-to-do-multi-row-insert-with-postgres-by-nodejs/</url>
    <content><![CDATA[<h3 id="緣起"><a href="#緣起" class="headerlink" title="緣起"></a>緣起</h3><p>最近有一個案子必須先透過 API 取得資料後把資料經過重組塞進 local database<br>環境上使用的是 nodejs + postgres</p>
<h3 id="過程"><a href="#過程" class="headerlink" title="過程"></a>過程</h3><p>經過了兩次重構之後整理一下最後的做法</p>
<ol>
<li><p>Using <a href="https://github.com/request/request-promise" target="_blank" rel="noopener">request-promise</a> lib</p>
</li>
<li><p>Using <a href="https://github.com/vitaly-t/pg-promise" target="_blank" rel="noopener">pg-promise</a> lib</p>
</li>
</ol>
<p>作者本人有在 <a href="https://stackoverflow.com/questions/37300997/multi-row-insert-with-pg-promise" target="_blank" rel="noopener">stackoverflow</a> 提供一段範例可以參考<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> pgp = <span class="built_in">require</span>(<span class="string">'pg-promise'</span>)(&#123;</span><br><span class="line">    <span class="comment">/* initialization options */</span></span><br><span class="line">    capSQL: <span class="literal">true</span> <span class="comment">// capitalize all generated SQL</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> db = pgp(<span class="comment">/*connection*/</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// our set of columns, to be created only once, and then shared/reused,</span></span><br><span class="line"><span class="comment">// to let it cache up its formatting templates for high performance:</span></span><br><span class="line"><span class="keyword">const</span> cs = <span class="keyword">new</span> pgp.helpers.ColumnSet([<span class="string">'col_a'</span>, <span class="string">'col_b'</span>], &#123;<span class="attr">table</span>: <span class="string">'tmp'</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// data input values:</span></span><br><span class="line"><span class="keyword">const</span> values = [&#123;<span class="attr">col_a</span>: <span class="string">'a1'</span>, <span class="attr">col_b</span>: <span class="string">'b1'</span>&#125;, &#123;<span class="attr">col_a</span>: <span class="string">'a2'</span>, <span class="attr">col_b</span>: <span class="string">'b2'</span>&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// generating a multi-row insert query:</span></span><br><span class="line"><span class="keyword">const</span> query = pgp.helpers.insert(values, cs);</span><br><span class="line"><span class="comment">//=&gt; INSERT INTO "tmp"("col_a","col_b") VALUES('a1','b1'),('a2','b2')</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// executing the query:</span></span><br><span class="line">db.none(query)</span><br><span class="line">    .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// success;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// error;</span></span><br></pre></td></tr></table></figure></p>
<ol start="3">
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map#Using_map_to_reformat_objects_in_an_array" target="_blank" rel="noopener">Using map to reformat objects in an array</a></li>
</ol>
<p>這篇裡面的範例也可以參考一下，當然 var 在 es7 裡面已經被棄用，但以 map 來做集合操作仍然是相當實用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> kvArray = [&#123;<span class="attr">key</span>: <span class="number">1</span>, <span class="attr">value</span>: <span class="number">10</span>&#125;, </span><br><span class="line">               &#123;<span class="attr">key</span>: <span class="number">2</span>, <span class="attr">value</span>: <span class="number">20</span>&#125;, </span><br><span class="line">               &#123;<span class="attr">key</span>: <span class="number">3</span>, <span class="attr">value</span>: <span class="number">30</span>&#125;];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reformattedArray = kvArray.map(<span class="function"><span class="params">obj</span> =&gt;</span>&#123; </span><br><span class="line">   <span class="keyword">var</span> rObj = &#123;&#125;;</span><br><span class="line">   rObj[obj.key] = obj.value;</span><br><span class="line">   <span class="keyword">return</span> rObj;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// reformattedArray is now [&#123;1: 10&#125;, &#123;2: 20&#125;, &#123;3: 30&#125;], </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// kvArray is still: </span></span><br><span class="line"><span class="comment">// [&#123;key: 1, value: 10&#125;, </span></span><br><span class="line"><span class="comment">//  &#123;key: 2, value: 20&#125;, </span></span><br><span class="line"><span class="comment">//  &#123;key: 3, value: 30&#125;]</span></span><br></pre></td></tr></table></figure>
<h3 id="One-more-thing"><a href="#One-more-thing" class="headerlink" title="One more thing"></a>One more thing</h3><p>程式結束記得補上<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pgp.end()</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>nodejs</tag>
        <tag>express</tag>
        <tag>postgres</tag>
        <tag>pg-promise</tag>
      </tags>
  </entry>
  <entry>
    <title>How to deploy github pages with hexo</title>
    <url>/2014/09/24/How-to-deploy-github-pages-with-hexo/</url>
    <content><![CDATA[<h3 id="緣起"><a href="#緣起" class="headerlink" title="緣起"></a>緣起</h3><p>身為一位自以為專業的技客，自然要有一個自己的 github 帳號<br>然後有了帳號以後下一步至少要有一個 github pages 的 blog<br>於是花了點時間摸了一下如何利用 hexo 這個套件來部屬，未免忘記在這邊記錄一下。</p>
<h3 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h3><p>先去你的 github 開一個新的 repo<br>名稱要是你的 <username>.github.io，其他都預設即可</username></p>
<h3 id="Update-homebrew-and-install-node-and-npm"><a href="#Update-homebrew-and-install-node-and-npm" class="headerlink" title="Update homebrew and install node (and npm)"></a>Update homebrew and install node (and npm)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew update</span><br><span class="line">$ brew install node</span><br></pre></td></tr></table></figure>
<h3 id="Install-hexo-by-npm"><a href="#Install-hexo-by-npm" class="headerlink" title="Install hexo by npm"></a>Install hexo by npm</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo</span><br></pre></td></tr></table></figure>
<h3 id="Initialize-a-folder-by-hexo"><a href="#Initialize-a-folder-by-hexo" class="headerlink" title="Initialize a folder by hexo"></a>Initialize a folder by hexo</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>
<p>這個時候應該會看到資料夾底下多了一堆東西，其中有一個檔案是 _config.yml</p>
<p>打開它之後拉到最下面在 deploy 的位置改成下面這樣</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    <span class="built_in">type</span>: github</span><br><span class="line">    repo: &lt;repo uri&gt; (可使用 ssh or https)</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure>
<h3 id="Deploy-your-pages"><a href="#Deploy-your-pages" class="headerlink" title="Deploy your pages"></a>Deploy your pages</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>打開你的 <a href="http://username.github.io" target="_blank" rel="noopener">http://username.github.io</a> 應該就會看到一切已經佈署完成了</p>
<h3 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h3><p>之後要編寫文章可以使用以下指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new &lt;title name&gt;</span><br></pre></td></tr></table></figure>
<p>會在 source/_post/ 出現一個檔名為 <title name>.md 的檔案，請直接對該檔案進行編修<br>這是 markdown 格式的檔案，撰寫方式可以參考 <a href="http://markdown.tw/" target="_blank" rel="noopener">markdown.tw</a></title></p>
<p>更新並且發佈如下<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate -d</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>mac</tag>
        <tag>hexo</tag>
        <tag>github pages</tag>
      </tags>
  </entry>
  <entry>
    <title>How to make a ssh tunnel by sshuttle using pem file</title>
    <url>/2021/08/16/How-to-make-a-ssh-tunnel-by-sshuttle-using-pem-file/</url>
    <content><![CDATA[<h3 id="緣由"><a href="#緣由" class="headerlink" title="緣由"></a>緣由</h3><p>因為某天需要使用 ssh tunnel 打到 aws 服務的內部去，但因為需要使用 pem 憑證當作連線身份驗證，所以查了一下指令該如何下</p>
<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p>使用如下指令應該可以輕鬆完成<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sshuttle -r &lt;hostname&gt; --dns 0/0 --ssh-cmd &apos;ssh -i &lt;filename&gt;.pem&apos;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>mac</tag>
        <tag>sshuttle</tag>
        <tag>tunnel</tag>
        <tag>pem</tag>
      </tags>
  </entry>
  <entry>
    <title>How to clean docker images every day</title>
    <url>/2020/08/18/How-to-clean-docker-images-every-day/</url>
    <content><![CDATA[<h3 id="緣由"><a href="#緣由" class="headerlink" title="緣由"></a>緣由</h3><p>因為使用 docker 加上套用了 CI/CD 之後呢，用來 build 的中繼 container 還有舊版本的 images 會佔掉很多空間，所以想來做一下每天自動清除這些垃圾的機制</p>
<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p>其實很簡單，只要在 cron job 裡面加入清除指令就行了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ crontab -e</span><br><span class="line"></span><br><span class="line">加入一條這個 <span class="comment">#每天凌晨三點清除一次</span></span><br><span class="line">0 3 * * * /usr/bin/docker system prune -f</span><br><span class="line"></span><br><span class="line"><span class="comment">#記得要重新讀取設定</span></span><br><span class="line">$ sudo service cron reload</span><br></pre></td></tr></table></figure>
<p>就這樣打完收工</p>
]]></content>
      <tags>
        <tag>ubuntu</tag>
        <tag>docker</tag>
        <tag>droneci</tag>
        <tag>cron</tag>
      </tags>
  </entry>
  <entry>
    <title>How to install Gitlab on Ubuntu 14.04 LTS</title>
    <url>/2015/10/14/How-to-install-Gitlab-on-Ubuntu-14-04-LTS/</url>
    <content><![CDATA[<h3 id="緣起"><a href="#緣起" class="headerlink" title="緣起"></a>緣起</h3><p>其實使用 <a href="https://about.gitlab.com/" target="_blank" rel="noopener">GitLab</a> 也是有好一段時間了，但是早期的 GitLab 安裝麻煩又囉唆，使用起來也常常聽說有不穩定的問題，但發展也好一段時間了。<br>目前在規模上面也是到達一定程度，而且已經被包成一個 deb 檔案，所以只要一個 dpkg -i 就可以把所有需要的套件裝完，簡便性大增。<br>在 7.9.2 之後 GitLab 也進行版本切割，一般人會用到的比較多應該還是社群版(CE版)，這邊來稍微紀錄一下我的整個安裝過程。</p>
<p>而這篇主要是參考了 Gaod 大神的大作<br><a href="http://blog.hychen.org/archives/2014/05/13/165/gitlab-on-ubuntu-12-04-lts/" target="_blank" rel="noopener">GitLab on Ubuntu 12.04 LTS，在 Ubuntu 12.04 上安裝 GitLab</a></p>
<h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo wget &lt;檔案連結url&gt; # 連結在 https://www.gitlab.com/downloads/</span><br><span class="line">sudo dpkg -i &lt;檔案名稱&gt;</span><br><span class="line">sudo apt-get install python-docutils</span><br></pre></td></tr></table></figure>
<h3 id="如何重跑-GitLab-服務"><a href="#如何重跑-GitLab-服務" class="headerlink" title="如何重跑 GitLab 服務"></a>如何重跑 GitLab 服務</h3><p>假設要重跑 GitLab 相關的所有服務</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl restart</span><br></pre></td></tr></table></figure>
<p>當然，也可以重跑特定服務就好，例如只想單純重跑 nginx<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl restart nginx</span><br></pre></td></tr></table></figure></p>
<h3 id="如何從備份還原-GitLab-資料"><a href="#如何從備份還原-GitLab-資料" class="headerlink" title="如何從備份還原 GitLab 資料"></a>如何從備份還原 GitLab 資料</h3><p>這邊是假設備份檔放在 /net/gitlab_backup，檔名是 ${timestamp}_gitlab_backup.tar</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo gitlab-rake gitlab:backup:restore RAILS_ENV=production gitlab:backup:restore BACKUP=/net/gitlab_backup/$&#123;timestamp&#125;_gitlab_backup.tar</span><br><span class="line">or</span><br><span class="line">sudo gitlab-rake gitlab:backup:restore BACKUP=$&#123;timestamp&#125; force=yes</span><br></pre></td></tr></table></figure>
<h3 id="如何更新-GitLab-版本"><a href="#如何更新-GitLab-版本" class="headerlink" title="如何更新 GitLab 版本"></a>如何更新 GitLab 版本</h3><p>假設要從舊版封裝升到 GitLab 新版本（請注意，未來可能會有些版本需要額外的手動介入，更新前最好還是看一下官方文件並且先備份）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo wget &lt;檔案連結&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo gitlab-ctl stop unicorn</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo gitlab-ctl stop sidekiq</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo dpkg -i &lt;檔案名稱&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo gitlab-ctl reconfigure</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo gitlab-ctl start</span></span><br></pre></td></tr></table></figure>
<h3 id="備註"><a href="#備註" class="headerlink" title="備註"></a>備註</h3><p>其他設定可以參考一下原文</p>
]]></content>
      <tags>
        <tag>ubuntu</tag>
        <tag>gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>How to mitigate Slow HTTP Dos Attack on Apache 2.4 in Ubuntu</title>
    <url>/2016/08/19/How-to-mitigate-Slow-HTTP-Dos-Attack-on-Apache-2-4-in-Ubuntu/</url>
    <content><![CDATA[<h3 id="緣起"><a href="#緣起" class="headerlink" title="緣起"></a>緣起</h3><p>最近接到一個任務，是要把對外網站的一些安全漏洞補起來，而其中我拿到兩個 issue 要解：  </p>
<ol>
<li>disable website directory listing</li>
<li>mitigate Slow HTTP Dos Attack</li>
</ol>
<p>拜請 Google 大神之後大致上看起來應該是不太難<br>主要參考了這兩篇：</p>
<ol>
<li><a href="http://stackoverflow.com/questions/2530372/how-do-i-disable-directory-browsing" target="_blank" rel="noopener">How do I disable directory browsing</a></li>
<li><a href="http://ssorc.tw/5744" target="_blank" rel="noopener">Apache 如何防護 Slow HTTP DOS 攻擊</a></li>
</ol>
<h3 id="實作第一個問題"><a href="#實作第一個問題" class="headerlink" title="實作第一個問題"></a>實作第一個問題</h3><p>基本上在 Apache 的環境下面就是兩個做法最普遍</p>
<ol>
<li><p>在 .htaccess 裡面加上</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Options -Indexes</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 virtualhost 資訊裡拿掉 Indexes</p>
</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># before</span></span><br><span class="line">&lt;Directory /var/www/&gt;</span><br><span class="line">        Options Indexes FollowSymLinks</span><br><span class="line">        AllowOverride None</span><br><span class="line">        Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># after</span></span><br><span class="line">&lt;Directory /var/www/&gt;</span><br><span class="line">        Options FollowSymLinks</span><br><span class="line">        AllowOverride None</span><br><span class="line">        Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>
<p>然後重啟 Apache 就搞定了</p>
<h3 id="實作第二個問題"><a href="#實作第二個問題" class="headerlink" title="實作第二個問題"></a>實作第二個問題</h3><p>在上面的文章裡面提供了三種方法</p>
<ol>
<li>mod_reqtimeout</li>
<li>mod_qos</li>
<li>mod_security</li>
</ol>
<p>這三種我都試了一輪<br>1 最簡單<br>在 virtualhost 裡面直接加上去就行了<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;IfModule mod_reqtimeout.c&gt;</span><br><span class="line">  RequestReadTimeout header=20-40,MinRate=500 body=20-40,MinRate=500</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure></p>
<p>2 mod_qos 在 Apache 2.4 已經不支援了，所以不用玩了</p>
<p>3 的部分功能最多，做起來也最麻煩</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libapache2-mod-security2</span><br></pre></td></tr></table></figure>
<p>（如果你在這邊沒有遇到其他問題的話，事情其實也不難搞定，但是我在這邊遇到一連串問題搞了我非常多時間，解決的過程因為文獻被我搞丟了，所以請大家自求多福了XD）</p>
<p>弄好之後一樣把下面加進去 virtualhost 設定檔裡面重啟 Apache 就搞定</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;IfModule mod_security2.c&gt;</span><br><span class="line">SecRule RESPONSE_STATUS <span class="string">"@streq 408"</span> <span class="string">"phase:5,t:none,nolog,pass, setvar:ip.slow_dos_counter=+1, expirevar:ip.slow_dos_counter=60, id:'1234123456'"</span></span><br><span class="line"></span><br><span class="line">SecRule IP:SLOW_DOS_COUNTER <span class="string">"@gt 5"</span> <span class="string">"phase:1,t:none,log,drop, msg:'Client Connection Dropped due to high number of slow DoS alerts', id:'1234123457'"</span></span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure>
<h3 id="備註"><a href="#備註" class="headerlink" title="備註"></a>備註</h3><p>最後附上一個測試 slow http dos attack 的工具<br><a href="https://github.com/shekyan/slowhttptest" target="_blank" rel="noopener">SlowHTTPTest</a></p>
]]></content>
      <tags>
        <tag>ubuntu</tag>
        <tag>apache2.4</tag>
        <tag>security</tag>
      </tags>
  </entry>
  <entry>
    <title>How to install the latest git on mac</title>
    <url>/2014/09/27/How-to-install-latest-git-on-Mac/</url>
    <content><![CDATA[<h3 id="緣起"><a href="#緣起" class="headerlink" title="緣起"></a>緣起</h3><p>因為長期使用 mac 所以經常仰賴 <a href="http://brew.sh/" target="_blank" rel="noopener">homebrew</a> 來補足 mac 本身內建套件的不足，一直以來也得到很多便利性。<br>但自從開始大量嘗試玩新東西之後，對於很多套件的版本問題開始重視，然而 apple 本身提供的套件其實相當的過時，此篇文章記錄一下如何使用 homebrew 安裝的套件來取代原本內建於電腦的相同套件，本文以 git 為例，其他套件如 vim 也能夠使用相同的作法來操作。</p>
<h3 id="首先先確認一下目前電腦中-git-的版本"><a href="#首先先確認一下目前電腦中-git-的版本" class="headerlink" title="首先先確認一下目前電腦中 git 的版本"></a>首先先確認一下目前電腦中 git 的版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git --version</span><br><span class="line">git version 1.9.3 (Apple Git-50)</span><br></pre></td></tr></table></figure>
<h3 id="可以使用以下指令看到目前-git-位在內建的資料夾底下-原生的檔案大多都在-usr-bin-底下"><a href="#可以使用以下指令看到目前-git-位在內建的資料夾底下-原生的檔案大多都在-usr-bin-底下" class="headerlink" title="可以使用以下指令看到目前 git 位在內建的資料夾底下(原生的檔案大多都在 /usr/bin/ 底下)"></a>可以使用以下指令看到目前 git 位在內建的資料夾底下(原生的檔案大多都在 /usr/bin/ 底下)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">which</span> git</span><br><span class="line">/usr/bin/git</span><br></pre></td></tr></table></figure>
<h3 id="利用-homebrew-安裝-git，並且將內建的-git-進行更名（這樣系統在內建的資料夾找不到-git-會自動轉往-homebrew-的-usr-local-bin-底下找）"><a href="#利用-homebrew-安裝-git，並且將內建的-git-進行更名（這樣系統在內建的資料夾找不到-git-會自動轉往-homebrew-的-usr-local-bin-底下找）" class="headerlink" title="利用 homebrew 安裝 git，並且將內建的 git 進行更名（這樣系統在內建的資料夾找不到 git 會自動轉往 homebrew 的 /usr/local/bin/ 底下找）"></a>利用 homebrew 安裝 git，並且將內建的 git 進行更名（這樣系統在內建的資料夾找不到 git 會自動轉往 homebrew 的 /usr/local/bin/ 底下找）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew update</span><br><span class="line">$ brew install git</span><br><span class="line">$ sudo mv /usr/bin/git /usr/bin/git48</span><br></pre></td></tr></table></figure>
<h3 id="這邊可以確認-git-目前連結到的位置已經變更，版本也已經更新"><a href="#這邊可以確認-git-目前連結到的位置已經變更，版本也已經更新" class="headerlink" title="這邊可以確認 git 目前連結到的位置已經變更，版本也已經更新"></a>這邊可以確認 git 目前連結到的位置已經變更，版本也已經更新</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">which</span> git</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/git</span><br><span class="line"></span><br><span class="line">$ git --version</span><br><span class="line">git version 2.1.1</span><br></pre></td></tr></table></figure>
<h3 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h3><p>如果想要使用舊版的朋友可以直接打改過的檔名（在這邊就是 git48）依然可以使用內建的版本。<br>如果想要還原的話可以把指令反過來執行如下：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo mv /usr/bin/git48 /usr/bin/git</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>mac</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Install CUDA 10.0 with cuDNN 7.3.1 on Ubuntu 18.04 bionic</title>
    <url>/2018/10/02/Install-CUDA-10-0-with-cuDNN-7-3-1-on-Ubuntu-18-04-bionic/</url>
    <content><![CDATA[<h3 id="Introdution"><a href="#Introdution" class="headerlink" title="Introdution"></a>Introdution</h3><p>This is helping you to install the latest CUDA 10.0 which released Sept. 2018 on Ubuntu 18.04 bionic</p>
<h3 id="Step-by-step"><a href="#Step-by-step" class="headerlink" title="Step by step"></a>Step by step</h3><p>At first you need a bionic ubuntu server and lets start it</p>
<ol>
<li><p>Install driver</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:graphics-drivers/ppa</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install nvidia-396</span><br></pre></td></tr></table></figure>
</li>
<li><p>Install CUDA 10.0<br><a href="https://developer.nvidia.com/cuda-downloads" target="_blank" rel="noopener">Download here</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo dpkg -i <span class="string">'cuda10.0.deb'</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install cuda</span><br></pre></td></tr></table></figure>
</li>
<li><p>Test CUDA</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/cuda/samples/1_Utilities/deviceQuery</span><br><span class="line">sudo make </span><br><span class="line">./deviceQuery</span><br></pre></td></tr></table></figure>
</li>
<li><p>Install cuDNN 7.3.1<br><a href="https://developer.nvidia.com/rdp/cudnn-download" target="_blank" rel="noopener">Download here</a><br>(You need to register if you don’t have account)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo dpkg -i <span class="string">'Your Runtime Library.deb'</span></span><br><span class="line">sudo dpkg -i <span class="string">'Your Developer Library.deb'</span></span><br><span class="line">sudo dpkg -i <span class="string">'Your Code Sample.deb'</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Test cdDNN</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/src/cudnn_samples_v7/mnistCUDNN</span><br><span class="line">sudo make </span><br><span class="line">./mnistCuDNN</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>I got a error during “sudo make”</p>
<ol start="6">
<li>One more thing<br>There is a bug in cdDNN package</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /usr/include/cudnn.h</span><br><span class="line"></span><br><span class="line">//change this</span><br><span class="line"><span class="comment">#include "driver_types.h"</span></span><br><span class="line"></span><br><span class="line">//to:</span><br><span class="line"><span class="comment">#include &lt;driver_types.h&gt;</span></span><br></pre></td></tr></table></figure>
<p>And now you can repeat step 5.</p>
<p>All set!</p>
<p>BTW<br>It works on pytorch 0.4.1 with stable/linux/py3.6/cuda9.2<br><a href="https://pytorch.org/get-started/locally/" target="_blank" rel="noopener">Download here</a><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install http://download.pytorch.org/whl/cu92/torch-0.4.1-cp36-cp36m-linux_x86_64.whl</span><br><span class="line">pip3 install torchvision</span><br></pre></td></tr></table></figure></p>
<h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h3><p><a href="https://blog.csdn.net/junzia/article/details/80871145" target="_blank" rel="noopener">https://blog.csdn.net/junzia/article/details/80871145</a><br><a href="https://medium.com/@afun/ubuntu-16-04-%E5%AE%89%E8%A3%9D-cuda-cudnn-nvidia-driver-%E7%9A%84%E8%B8%A9%E9%9B%B7%E5%BF%83%E5%BE%97-%E9%9D%9E%E5%AE%89%E8%A3%9D%E6%AD%A5%E9%A9%9F%E8%A9%B3%E8%A7%A3-b13121d95025" target="_blank" rel="noopener">https://medium.com/@afun/ubuntu-16-04-%E5%AE%89%E8%A3%9D-cuda-cudnn-nvidia-driver-%E7%9A%84%E8%B8%A9%E9%9B%B7%E5%BF%83%E5%BE%97-%E9%9D%9E%E5%AE%89%E8%A3%9D%E6%AD%A5%E9%A9%9F%E8%A9%B3%E8%A7%A3-b13121d95025</a></p>
]]></content>
      <tags>
        <tag>ubuntu</tag>
        <tag>CUDA</tag>
        <tag>bionic</tag>
        <tag>cuDNN</tag>
        <tag>pytorch</tag>
        <tag>linux</tag>
        <tag>nvidia</tag>
        <tag>P100</tag>
      </tags>
  </entry>
  <entry>
    <title>How to telnet in alpine docker container</title>
    <url>/2020/07/31/How-to-telnet-in-alpine-docker-container/</url>
    <content><![CDATA[<h3 id="緣由"><a href="#緣由" class="headerlink" title="緣由"></a>緣由</h3><p>由於想要在 container 裡面測試此 container 與某服務連線有通，但通常 container 裡面的軟體都極度精簡，所以來記錄一下在 alpine 的容器裡面該怎麽操作</p>
<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p>首先進入到容器內<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it &lt;CONTAINERID&gt; sh</span><br><span class="line">or</span><br><span class="line">$ docker-compose <span class="built_in">exec</span> &lt;containerName&gt; sh</span><br></pre></td></tr></table></figure></p>
<p>進入到容器內後開始進行安裝和使用<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ apk update</span><br><span class="line">$ apk add busybox-extras</span><br><span class="line">$ busybox-extras telnet localhost 5432</span><br></pre></td></tr></table></figure></p>
<p>收工</p>
]]></content>
      <tags>
        <tag>docker</tag>
        <tag>alpine</tag>
        <tag>telnet</tag>
      </tags>
  </entry>
  <entry>
    <title>How to upgrade PHP version on your mac</title>
    <url>/2015/10/07/How-to-upgrade-PHP-version-on-your-mac/</url>
    <content><![CDATA[<h3 id="緣起"><a href="#緣起" class="headerlink" title="緣起"></a>緣起</h3><p>最近為了發揮 laravel 5.1 完整的功能，而在研究裡面包好的各種阿里布達套件，弄著弄著弄到了 <a href="https://phpunit.de/" target="_blank" rel="noopener">phpunit</a> 但在安裝 phpunit 遇到了一個問題，就是 mac 不知道跟 php 有仇還是怎樣，幾乎各種版本 cli 都更新了就是 php 還停留在 5.5 不知道是哪招(老闆聽說 php7 都已經 RC2 啦～)，導致於新版 phpunit 無法執行(目前穩定版需要配合 php 5.6)，於是乎很多人會想到了使用 homebrew 來作安裝，但無奈的是 homebrew 也沒有把 php 納入，所以要安裝的話必須另外用一些方法。</p>
<h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><p>在安裝的部分可以參考 <a href="https://github.com/Homebrew/homebrew-php" target="_blank" rel="noopener">homebrew-php</a> 的說明<br>這裡使用的是 homebrew 的隱藏指令 tap，據悉是用來安裝擴充套件的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew tap homebrew/dupes</span><br><span class="line">$ brew tap homebrew/versions</span><br><span class="line">$ brew tap homebrew/homebrew-php</span><br></pre></td></tr></table></figure>
<p>前置做完之後就可以進行安裝</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 安裝 php5.6 , 如果你想安裝 7.0 也可以改成 php70</span><br><span class="line">$ brew install php56</span><br></pre></td></tr></table></figure>
<p>裝好之後應該就搞定啦！</p>
<h3 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h3><p>這裡有一點很詭異的地方是，Mac OSX 10.11(EI Capitan)裡面的 whereis 根本是錯的，不管你怎麼設定，他幫你找到的位置永遠是 /usr/bin/*</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ whereis php</span><br><span class="line">/usr/bin/php</span><br><span class="line"></span><br><span class="line">$ php --version</span><br><span class="line">PHP 5.6.14 (cli)</span><br><span class="line"></span><br><span class="line">$ /usr/bin/php --version</span><br><span class="line">PHP 5.5.27 (cli)</span><br></pre></td></tr></table></figure>
<p>可見 whereis 在現在這版本根本壞了<br>下次更新不知道會不會修回來</p>
<p>另外關於隱藏指令可以稍微參考一下這篇<br><a href="http://icyleaf.com/2014/01/homebrew-hidden-commands/" target="_blank" rel="noopener">隱藏指令</a></p>
]]></content>
      <tags>
        <tag>mac</tag>
        <tag>EI Capitan</tag>
        <tag>php</tag>
        <tag>phpunit</tag>
      </tags>
  </entry>
  <entry>
    <title>How to rotate docker log json files</title>
    <url>/2020/01/06/How-to-rotate-docker-log-json-files/</url>
    <content><![CDATA[<h3 id="緣由"><a href="#緣由" class="headerlink" title="緣由"></a>緣由</h3><p>docker 在運作的時候會記錄每一筆 stdout 還有 stderr，寫在一個 log file 裡面，通常是長這樣<br>/var/lib/docker/containers/[container-id]/[container-id]-json.log<br>然後久了之後，這檔案會超級大，到某一天發現硬碟快爆了的時候你就會發現</p>
<p>所以可以透過官方給的文件做一些 rotation 的設定<br><a href="https://docs.docker.com/config/containers/logging/configure/" target="_blank" rel="noopener">https://docs.docker.com/config/containers/logging/configure/</a></p>
<h3 id="實際操作"><a href="#實際操作" class="headerlink" title="實際操作"></a>實際操作</h3><p>如果要手動刪除那個檔案可以用這個指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo truncate -s 0 &lt;logfile&gt;</span><br></pre></td></tr></table></figure>
<p>建立一個 /etc/docker/daemon.json<br>內容用以下即可</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"log-driver"</span>: <span class="string">"json-file"</span>,</span><br><span class="line">  <span class="attr">"log-opts"</span>: &#123;</span><br><span class="line">    <span class="attr">"max-size"</span>: <span class="string">"10m"</span>,</span><br><span class="line">    <span class="attr">"max-file"</span>: <span class="string">"10"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重新吃一下設定檔還有重新啟動 docker service</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl daemon-reload</span><br><span class="line">$ systemctl restart docker</span><br></pre></td></tr></table></figure>
<p>這樣應該就行了</p>
]]></content>
      <tags>
        <tag>docker</tag>
        <tag>log</tag>
        <tag>rotation</tag>
      </tags>
  </entry>
  <entry>
    <title>How to find the path of device on your mac</title>
    <url>/2015/08/31/How-to-find-the-path-of-device-on-your-mac/</url>
    <content><![CDATA[<h3 id="緣起"><a href="#緣起" class="headerlink" title="緣起"></a>緣起</h3><p>當你在終端機想要找尋你所插在電腦的裝置的真實路徑的時候<br>你可能無從下手，okay 現在把下面這個指令勇敢地敲下去</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ls -1 /dev/tty.*</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Install Rust language on your mac.</title>
    <url>/2019/07/23/Install-Rust-language-on-your-mac/</url>
    <content><![CDATA[<h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl https://sh.rustup.rs -sSf | sh</span><br><span class="line"></span><br><span class="line">sudo vim /private/etc/paths</span><br><span class="line">// add <span class="variable">$HOME</span>/.cargo/bin to a new line</span><br></pre></td></tr></table></figure>
<h3 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cargo</span><br><span class="line">rustc</span><br><span class="line">rustup</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>mac</tag>
        <tag>macosx</tag>
        <tag>rust</tag>
        <tag>rustup</tag>
        <tag>cargo</tag>
      </tags>
  </entry>
  <entry>
    <title>git pull 強制設定至 origin/master branch</title>
    <url>/2015/05/22/git-pull-%E5%BC%B7%E5%88%B6%E8%A8%AD%E5%AE%9A%E8%87%B3-origin-master-branch/</url>
    <content><![CDATA[<h3 id="緣起"><a href="#緣起" class="headerlink" title="緣起"></a>緣起</h3><p>因為多人進行開發的時候會有版本控管問題，因此大多人會使用一些版本控制工具，時下最熱門的當然屬 git 為主流<br>有時候因為我們改了些東西而別人也改了同樣的東西導致有些衝突在，最後亂成一團的時候一發不可收拾，於是乎我們會想乾脆 reset 至現在 server 上面的最新版本重來，這個時候我們可以用下面這兩行來進行 reset</p>
<h3 id="直接指令下去就不多解釋了"><a href="#直接指令下去就不多解釋了" class="headerlink" title="直接指令下去就不多解釋了"></a>直接指令下去就不多解釋了</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git fetch --all  </span><br><span class="line">$ git reset --hard origin/master</span><br></pre></td></tr></table></figure>
<p>這個時候再重新 git pull 就大功告成了</p>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Update date on Ubuntu</title>
    <url>/2014/10/22/Update-date-on-Ubuntu/</url>
    <content><![CDATA[<h3 id="緣起"><a href="#緣起" class="headerlink" title="緣起"></a>緣起</h3><p>有時候或許會發現 OS 作業系統的時間不準的情況，如果是在 ubuntu 上面，其實只需要兩個指令就能夠更新設定</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo ntpdate time.stdtime.gov.tw // 更新系統時間</span><br><span class="line">$ sudo hwclock -w // 將新的時間寫入 blos</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Repair myisam table by myisamchk</title>
    <url>/2014/11/15/Repair-myisam-table-by-myisamchk/</url>
    <content><![CDATA[<h3 id="緣起"><a href="#緣起" class="headerlink" title="緣起"></a>緣起</h3><p>最近遇到了一個因為在 db 運作時 磁碟容量寫滿了，然後 db 直接 crash 後自動重開而且失敗，造成大量存取中的 table 毀損，稍微研究了一下如何把那些壞掉的 table 修復起來，以下做個分享</p>
<h3 id="首先先用以下指令檢查壞掉的情況"><a href="#首先先用以下指令檢查壞掉的情況" class="headerlink" title="首先先用以下指令檢查壞掉的情況"></a>首先先用以下指令檢查壞掉的情況</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ myisamchk &lt;table_name&gt;</span><br></pre></td></tr></table></figure>
<h3 id="若要修復的話加上參數-r"><a href="#若要修復的話加上參數-r" class="headerlink" title="若要修復的話加上參數 -r"></a>若要修復的話加上參數 -r</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ myisamchk -r &lt;table_name&gt;</span><br></pre></td></tr></table></figure>
<h3 id="若要修的數量太多太大可以再加上-q-快速模式"><a href="#若要修的數量太多太大可以再加上-q-快速模式" class="headerlink" title="若要修的數量太多太大可以再加上 -q (快速模式)"></a>若要修的數量太多太大可以再加上 -q (快速模式)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ myisamchk -r -q &lt;table_name&gt;</span><br></pre></td></tr></table></figure>
<h3 id="若修復過程遇到問題可以改成-o-安全模式-，但是更慢"><a href="#若修復過程遇到問題可以改成-o-安全模式-，但是更慢" class="headerlink" title="若修復過程遇到問題可以改成 -o (安全模式)，但是更慢"></a>若修復過程遇到問題可以改成 -o (安全模式)，但是更慢</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ myisamchk -o &lt;table_name&gt;</span><br></pre></td></tr></table></figure>
<p>全部修完之後可以再做一次 chk，另外如果要進行 mysqldump 遇到 LOCK TABLES 的情形可以使用–skip-lock-tables<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mysqldump -uroot -p<span class="variable">$PASSWORD</span> -q --skip-lock-tables &lt;db_name&gt; &gt; xxxx.sql</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>mysql</tag>
        <tag>myisam</tag>
        <tag>recovery</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Linux 系統使用 ssh key 登入</title>
    <url>/2018/06/05/%E5%9C%A8-Linux-%E7%B3%BB%E7%B5%B1%E4%BD%BF%E7%94%A8-ssh-key-%E7%99%BB%E5%85%A5/</url>
    <content><![CDATA[<h3 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h3><p>我們登入遠端伺服器每次都要打密碼其實又麻煩又不安全，有人提倡常常換密碼可以解決，但…這個在實質上的有用程度在這裡就不好說了。</p>
<h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><p>言歸正傳，這邊要介紹一下如何使用 ssh key 來登入遠端伺服器</p>
<p>通常我們會透過指令產生 ssh key<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure></p>
<p>產生出來的 key 通常會在<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></p>
<p>只要把我們的 key 加入到伺服器的下面這個檔案裡面就能達成用 key 登入<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure></p>
<p>所以我們可以用這個指令直接把 local 端的 ssh key 加進去 server 端的登入名單裡面<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub | ssh [user]@[server-host] <span class="string">"cat &gt;&gt; ~/.ssh/authorized_keys"</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>ubuntu</tag>
        <tag>ssh</tag>
        <tag>linux</tag>
        <tag>sshkey</tag>
        <tag>key</tag>
      </tags>
  </entry>
  <entry>
    <title>在 ubuntu 中找出大檔案</title>
    <url>/2018/03/28/%E5%9C%A8-ubuntu-%E4%B8%AD%E6%89%BE%E5%87%BA%E5%A4%A7%E6%AA%94%E6%A1%88/</url>
    <content><![CDATA[<h3 id="緣起"><a href="#緣起" class="headerlink" title="緣起"></a>緣起</h3><p>伺服器硬碟快爆掉了，所以找想找一下指令來做這件事，於是找到了這篇<br><a href="http://www.arthurtoday.com/2014/12/ubuntu-find-out-large-size-files-by-du-and-sort.html" target="_blank" rel="noopener">Ubuntu 用 du 和 sort 指令找出大檔案</a></p>
<h3 id="指令直接下"><a href="#指令直接下" class="headerlink" title="指令直接下"></a>指令直接下</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo du -h / | sort -h -r | more</span><br></pre></td></tr></table></figure>
<p>/ 代表開始掃描的起點，如果想改變掃描的位置可以改這邊</p>
<p>其他大致上沒什麼需要修改的</p>
<p>all set</p>
]]></content>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>如何刪除 mac 大頭貼照片</title>
    <url>/2018/09/03/%E5%A6%82%E4%BD%95%E5%88%AA%E9%99%A4-mac-%E5%A4%A7%E9%A0%AD%E8%B2%BC%E7%85%A7%E7%89%87/</url>
    <content><![CDATA[<h3 id="緣起"><a href="#緣起" class="headerlink" title="緣起"></a>緣起</h3><p>前幾天有位朋友來求救，使用多年的 mac 大頭貼裡面還有前女友照片怎麼辦啊～～<br>完全找不到地方刪除感覺會死人ＲＲＲＲＲＲ</p>
<p>於是平常正經的本 blog 就來寫一篇這個好了</p>
<h3 id="作法"><a href="#作法" class="headerlink" title="作法"></a>作法</h3><p>因為 mac 會把你用過的大頭貼圖片暫存在一個位置，以方便你下次又要用用過的圖片當圖示</p>
<p>通常系統會放在這個位置<br>~/Library/Containers/com.apple.ImageKit.RecentPictureService/Data/Library/Images/Recent Pictures/</p>
<p>但是因為這是隱藏資料夾<br>所以除非你會使用 command line<br>不然還是乖乖打開 finder 好了</p>
<p>打開後按下 cmd + shift + G<br>複製上面路徑貼上去 enter 就可以直達那個位置啦</p>
<h3 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h3><p>誠心建議各位還是找位不會計較你過去的女友比較好XD</p>
<h3 id="The-One-More-Thing"><a href="#The-One-More-Thing" class="headerlink" title="The One More Thing"></a>The One More Thing</h3><p>刪完記得要清空垃圾桶…</p>
]]></content>
      <tags>
        <tag>mac</tag>
        <tag>macosx</tag>
        <tag>救命</tag>
        <tag>前女友照片刪不掉</tag>
      </tags>
  </entry>
  <entry>
    <title>some problem with percona-mysql-server upgrade from 5.6 to 5.7</title>
    <url>/2016/08/24/some-problem-with-percona-mysql-server-upgrade-from-5-6-to-5-7/</url>
    <content><![CDATA[<h3 id="緣起"><a href="#緣起" class="headerlink" title="緣起"></a>緣起</h3><p>mysql 5.7 在功能與性能上都比 5.6 出色不少，但基於 percona 一直沒有更新的情況下我也沒有貿然升級，隨著前陣子 percona 釋出了 5.7 剛好最近又有了要使用 mysql 的機會，就想藉由這次機會順便升級 5.7</p>
<h3 id="過程"><a href="#過程" class="headerlink" title="過程"></a>過程</h3><p>在 OS 上面這台使用的是 Ubuntu 14.04，使用下面指令就能完成升級</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo service mysql stop</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install percona-server-server-5.7</span><br></pre></td></tr></table></figure>
<p>等到跑完之後重啟 mysql 即可…</p>
<p>但是大家都知道事情通常都不會這麼順利，所以我在這邊發生了 mysql 啟動不了的悲劇ＧＧ</p>
<h3 id="問題解決"><a href="#問題解決" class="headerlink" title="問題解決"></a>問題解決</h3><p>因為重啟的時候有看到如下的訊息<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">no directory logging <span class="keyword">in</span> with home=/ mysql</span><br></pre></td></tr></table></figure></p>
<p>於是先使用這樣的做法<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo usermod -d /var/lib/mysql/ mysql <span class="comment">#這裡舉例使用預設路徑，有改路徑的記得跟著改</span></span><br></pre></td></tr></table></figure></p>
<p>上面的作法等同於去修改 /etc/passwd 裡面 mysql 這個 user 的第六項資料，大致上是設定 mysql 這個 user 的家目錄的意思<br>想了解更多也可以參看一下這篇<a href="https://iyaozhen.com/ubuntu-upgrade-mysql-to-5-7.html" target="_blank" rel="noopener">Ubuntu 平滑升级 MySQL 到 5.7</a></p>
<p>再重啟訊息不見了，但是依然失敗</p>
<p>再去 /etc/mysql/my.cnf 裡面確定一下</p>
<ol>
<li>datadir = (資料路徑)</li>
<li>log_error= /var/log/mysql/error.log (log 有正確被寫入到預設位置)</li>
</ol>
<p>檢查一下 log 之後發現錯誤訊息是<br>‘innodb_buffer_pool_populate’ 這個參數找不到</p>
<p>Google 查一下找到下面這篇說明<br><a href="https://www.percona.com/doc/percona-server/5.7/changed_in_57.html" target="_blank" rel="noopener">Changed in Percona Server 5.7</a><br>innodb_buffer_pool_populate server option and numa_interleave mysql_safe.sh option have been replaced by innodb_numa_interleave server option. Note that flush_caches option still remains.</p>
<p>於是乎把 innodb_buffer_pool_populate 取代成 innodb_numa_interleave 重啟 mysql 就成功啟動了，謝天謝地。</p>
<h3 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h3><p>最後執行一下<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo mysql_upgrade -u root -p <span class="comment">#更新一下數據</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>ubuntu</tag>
        <tag>mysql</tag>
        <tag>percona</tag>
      </tags>
  </entry>
  <entry>
    <title>如何取得昨天的日期</title>
    <url>/2015/11/19/%E5%A6%82%E4%BD%95%E5%8F%96%E5%BE%97%E6%98%A8%E5%A4%A9%E7%9A%84%E6%97%A5%E6%9C%9F/</url>
    <content><![CDATA[<h2 id="緣起"><a href="#緣起" class="headerlink" title="緣起"></a>緣起</h2><p>在 linux 中要以 shell 指令取得系統日期、時間算是基本語法(大概是像下面這樣)<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> date</span></span><br><span class="line">Fri Nov 20 15:28:05 CST 2015</span><br></pre></td></tr></table></figure></p>
<p>如果想要擷取部份或是自己的型式可以用<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> date <span class="string">'+%Y%m%d%H%M%S'</span></span></span><br><span class="line">20151120152959</span><br><span class="line"><span class="meta">$</span><span class="bash"> date <span class="string">'+%Y%m%d'</span></span></span><br><span class="line">20151120</span><br></pre></td></tr></table></figure></p>
<p>但如果要擷取的非今天的日期，在傳統 unix 上面可就有點麻煩了，可能必須用些工具或是自己寫程式來運算。而在 linux 版本的 date 中可以運用一些指令來對於結果做一些簡單的運算</p>
<h2 id="直接看範例了"><a href="#直接看範例了" class="headerlink" title="直接看範例了"></a>直接看範例了</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">取得昨天的日期時間</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> date -d<span class="string">'-1 day'</span> <span class="comment">#或 date -d'1 day ago'</span></span></span><br><span class="line">Thu Nov 19 15:35:26 CST 2015</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">取得明天的日期</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> date -d<span class="string">'1 day'</span></span></span><br><span class="line">Sat Nov 21 15:36:59 CST 2015</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">取得上個月的日期</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> date -d<span class="string">'-1 month'</span></span></span><br><span class="line">Tue Oct 20 15:37:41 CST 2015</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">取得上星期的日期</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> date -d<span class="string">'-1 week'</span></span></span><br><span class="line">Fri Nov 13 15:37:56 CST 2015</span><br></pre></td></tr></table></figure>
<h2 id="但這時候如果想要移動同時又要自訂格式"><a href="#但這時候如果想要移動同時又要自訂格式" class="headerlink" title="但這時候如果想要移動同時又要自訂格式"></a>但這時候如果想要移動同時又要自訂格式</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 取得昨天的自訂格式日期</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> date -d <span class="string">'-1 day'</span> <span class="string">'+%Y%m%d'</span></span></span><br><span class="line">20151119</span><br></pre></td></tr></table></figure>
<p>其他的依此類推囉</p>
<h2 id="本篇參考"><a href="#本篇參考" class="headerlink" title="本篇參考"></a>本篇參考</h2><p><a href="http://eit.tw/IomMPP" target="_blank" rel="noopener">http://eit.tw/IomMPP</a></p>
]]></content>
      <tags>
        <tag>ubuntu</tag>
        <tag>linux</tag>
      </tags>
  </entry>
</search>
